release{
    git {
        requireBranch = ''
    }
    //pushChanges = false
}

class ReplaceVersionInFile extends DefaultTask {
    @Input
    String fileName
    @TaskAction
    def build() {
        def newVersion = ''
        new File('gradle.properties').eachLine { line ->
            if( newVersion.isEmpty() && line.startsWith('version=')){
                newVersion = line.substring('version='.length())
            }
        }
        println 'Setting new version ' + newVersion + ' on file ' + fileName
        def file = new File(fileName)
        def newContent = file.text.replaceAll('[0-9]+\\.[0-9]+\\.[0-9]+(-SNAPSHOT)?', newVersion)
        file.text = newContent
    }
}
class ReadMeBranch extends DefaultTask {
    @Input
    String targetBranch
    @TaskAction
    def build() {
        println 'README.md: switching branch to ' + targetBranch
        def content = ''
        def readmeBranch = ''
        def readme = new File('README.md')
        readme.eachLine { line ->
            if( readmeBranch.isEmpty() && line.contains('branch=')){
                readmeBranch = line.substring(line.indexOf('branch=')+'branch='.length())
                readmeBranch = readmeBranch.substring(0,readmeBranch.indexOf(')'))
            }
        }
        readme = new File('README.md')
        readme.eachLine { line ->
            if(line.startsWith('[![')){
                content += line.replaceAll(readmeBranch,targetBranch) + '\n'
            }else{
                content += line + '\n'
            }
        }
        readme.text = content
    }
}
task updateReadMeProjectReleaseVersion(type: ReplaceVersionInFile){
    fileName = 'README.md'
}
task updateSonarProjectReleaseVersion(type: ReplaceVersionInFile){
    fileName = 'sonar-project.properties'
}
task updateReadMeProjectVersion(type: ReplaceVersionInFile){
    fileName = 'README.md'
}
task updateSonarProjectVersion(type: ReplaceVersionInFile){
    fileName = 'sonar-project.properties'
}
task ReadMeForMaster(type:ReadMeBranch){
    targetBranch =  'master'
}
task ReadMeForCurrent(type:ReadMeBranch){
    targetBranch = gitBranchName
}
commitNewVersion.dependsOn ReadMeForCurrent
commitNewVersion.dependsOn updateSonarProjectVersion
commitNewVersion.dependsOn updateReadMeProjectVersion
runBuildTasks.dependsOn ReadMeForMaster
runBuildTasks.dependsOn updateReadMeProjectReleaseVersion
runBuildTasks.dependsOn updateSonarProjectReleaseVersion
afterReleaseBuild.dependsOn uploadArchives

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication( userName: rootProject.hasProperty('ossrhUsername') ? rootProject.ossrhUsername : '', password: rootProject.hasProperty('ossrhPassword') ? rootProject.ossrhPassword : '')
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication( userName: rootProject.hasProperty('ossrhUsername') ? rootProject.ossrhUsername : '', password: rootProject.hasProperty('ossrhPassword') ? rootProject.ossrhPassword : '')
            }
            pom.project {
                name archivesBaseName
                packaging 'jar'
                description projectDescription
                url projectUrl
                scm {
                    connection projectScmUrl
                    developerConnection projectScmUrl
                    url projectScmUrl
                }
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id authorId
                        name authorName
                        email authorEmail
                    }
                }
            }
        }
    }
}

def installer = install.repositories.mavenInstaller
def deployer = uploadArchives.repositories.mavenDeployer

[installer, deployer]*.pom*.whenConfigured { pom ->
    def dependencyMap = project.configurations.compile.dependencies.collectEntries { [it.name, it] }
    pom.dependencies.findAll {
        def dep = dependencyMap[it.artifactId]
        return dep?.hasProperty('optional') && dep.optional
    }*.optional = true
}
