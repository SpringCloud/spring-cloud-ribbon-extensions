release {
    git {
        requireBranch = ''
    }
    //pushChanges = false
}

class ReplaceVersionInFile extends DefaultTask {
    @Input
    String fileName

    @TaskAction
    def build() {
        def newVersion = ''
        new File('gradle.properties').eachLine('UTF-8') { line ->
            if (newVersion.isEmpty() && line.startsWith('version=')) {
                newVersion = line.substring('version='.length())
            }
        }
        println 'Setting new version ' + newVersion + ' on file ' + fileName
        def file = new File(fileName)
        def newContent = file.getText('UTF-8').replaceAll('[0-9]+\\.[0-9]+\\.[0-9]+(-SNAPSHOT)?', newVersion)
        file.setText(newContent, 'UTF-8')
    }
}

class ReadMeBranch extends DefaultTask {
    @Input
    String targetBranch

    @TaskAction
    def build() {
        println 'README.md: switching branch to ' + targetBranch
        def version = ''
        new File('gradle.properties').eachLine('UTF-8') { line ->
            if (version.isEmpty() && line.startsWith('version=')) {
                version = line.substring('version='.length())
            }
        }
        def isReleaseVersion = !version.endsWith("SNAPSHOT")
        def content = ''
        def replace = ''
        def readmeBranch = ''
        def readme = new File('README.md')
        readme.eachLine('UTF-8') { line ->
            if (readmeBranch.isEmpty() && line.contains('branch=')) {
                readmeBranch = line.substring(line.indexOf('branch=') + 'branch='.length())
                readmeBranch = readmeBranch.substring(0, readmeBranch.indexOf(')'))
            }
        }
        readme = new File('README.md')
        readme.eachLine('UTF-8') { line ->
            if (line.startsWith('[![')) {
                replace = line.replaceAll(readmeBranch, targetBranch)
                if (replace.contains("SonarCloud")) {
                    if (targetBranch == 'master') {
                        replace = replace.replaceAll(':' + targetBranch, '')
                    } else if (replace.contains('&metric') && !replace.contains(':' + targetBranch + '&metric')) {
                        replace = replace.replaceAll('&metric', ':' + targetBranch + '&metric')
                    }
                }
                if (isReleaseVersion && replace.contains('Sonatype Snapshots')) {
                    replace = replace.replaceAll('Sonatype Snapshots', 'Maven Central')
                    replace = replace.replaceAll('nexus/s/https/oss.sonatype.org', 'maven-central/v')
                    replace = replace.replaceAll('https://oss.sonatype.org/#nexus-search;gav', 'http://search.maven.org/#artifactdetails')
                    replace = replace.replaceAll('~', '|')
                }
                if (!isReleaseVersion && replace.contains("Maven Central")) {
                    replace = replace.replaceAll('Maven Central', 'Sonatype Snapshots')
                    replace = replace.replaceAll('maven-central/v', 'nexus/s/https/oss.sonatype.org/#artifactdetails')
                    replace = replace.replaceAll('http://search.maven.org/#artifactdetails', 'https://oss.sonatype.org/#nexus-search;gav')
                    replace = replace.replaceAll('\\|', '~')
                }
                content += replace + '\n'
            } else {
                content += line + '\n'
            }
        }
        readme.setText(content, 'UTF-8')
    }
}

task updateReadMeProjectReleaseVersion(type: ReplaceVersionInFile) {
    fileName = 'README.md'
}
updateReadMeProjectReleaseVersion.group = 'release'
task updateSonarProjectReleaseVersion(type: ReplaceVersionInFile) {
    fileName = 'sonar-project.properties'
}
updateSonarProjectReleaseVersion.group = 'release'
task updateReadMeProjectVersion(type: ReplaceVersionInFile) {
    fileName = 'README.md'
}
updateReadMeProjectVersion.group = 'release'
task updateSonarProjectVersion(type: ReplaceVersionInFile) {
    fileName = 'sonar-project.properties'
}
updateSonarProjectVersion.group = 'release'
task ReadMeForMaster(type: ReadMeBranch) {
    targetBranch = 'master'
}
ReadMeForMaster.group = 'release'
task ReadMeForCurrent(type: ReadMeBranch) {
    targetBranch = gitBranchName
}
ReadMeForCurrent.group = 'release'
commitNewVersion.dependsOn ReadMeForCurrent
commitNewVersion.dependsOn updateSonarProjectVersion
commitNewVersion.dependsOn updateReadMeProjectVersion
runBuildTasks.dependsOn ReadMeForMaster
runBuildTasks.dependsOn updateReadMeProjectReleaseVersion
runBuildTasks.dependsOn updateSonarProjectReleaseVersion
afterReleaseBuild.dependsOn uploadArchives

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: rootProject.hasProperty('ossrhUsername') ? rootProject.ossrhUsername : '', password: rootProject.hasProperty('ossrhPassword') ? rootProject.ossrhPassword : '')
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: rootProject.hasProperty('ossrhUsername') ? rootProject.ossrhUsername : '', password: rootProject.hasProperty('ossrhPassword') ? rootProject.ossrhPassword : '')
            }
            pom.project {
                name archivesBaseName
                packaging 'jar'
                description projectDescription
                url projectUrl
                scm {
                    connection projectScmUrl
                    developerConnection projectScmUrl
                    url projectScmUrl
                }
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id authorId
                        name authorName
                        email authorEmail
                    }
                }
            }
        }
    }
}

def installer = install.repositories.mavenInstaller
def deployer = uploadArchives.repositories.mavenDeployer

[installer, deployer]*.pom*.whenConfigured { pom ->
    def dependencyMap = project.configurations.compile.dependencies.collectEntries { [it.name, it] }
    pom.dependencies.findAll {
        def dep = dependencyMap[it.artifactId]
        return dep?.hasProperty('optional') && dep.optional
    }*.optional = true
}
